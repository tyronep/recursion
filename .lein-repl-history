(doc first)
(doc rest)
(rest [1 2 3])
(first '(1 2 3 4))
(rest [1])
rest []
(rest [])
(cons 1
(cons 2
(cons 3
(cons 4 '()))
)
(doc cons)
(doc conj)
(defn sum [coll]
(if (empty? coll)
0
(+ (first coll)
(sum (rest coll))
)
(sum [1 2 3 4])
(defn product [coll]
  (if (empty? coll)
    1
    (* (first coll)
       (product (rest coll)))))
(product [])
(product [1 2 3])
(product [0 1 2])
(product [1 2 3 4])
(product #{2 3 4})
(defn singleton? [coll]
  (nil? (rest coll)))
(singleton? [1])
(defn singleton? [coll]
  (empty? (rest coll)))
(singleton? [1])
(singleton? [1 2])
(singleton? [])
(defn singleton? [coll]
  (and
   (not nil? (first coll))
    (empty? (rest coll))))
(singleton? [])
(defn singleton? [coll]
  (and
   (not (nil? (first coll)))
    (empty? (rest coll))))
(singleton? [])
(singleton #{2})
(singleton? #{2})
(defn my-last [coll]
  (if (singleton? coll)
    (first coll)
    (my-last (rest coll))))
(my-last [])
(defn my-last [coll]
  (if (empty? coll)
    nil)
  (if (singleton? coll)
    (first coll)
    (my-last (rest coll))))
(my-last [])
(defn my-last [coll]
  (if (empty? coll)
    (nil)
    (if (singleton? coll)
      (first coll)
      (my-last (rest coll)))))
(defn my-last [coll]
  (if (empty? coll)
    (first coll)
    (if (singleton? coll)
      (first coll)
      (my-last (rest coll)))))
(my-last [])
(my-last [1 2 3])
(my-last [2 5])
(max (first []) (rest []))
(max (1 2 )
)
(max 1 2 )
(max 1 (nil))
(max 1)
(defn max-element [a-seq]
  (if (empty? a-seq)
    (first a-seq)
    (max
     (first a-seq)
     (max-element (rest a-seq)))))
(max-element [])
(max-element 2)
(max-element [2 4 1 4])
(defn max-element [a-seq]
  (let [fst (first a-seq)]
    (if (empty? a-seq)
      fst
      (max fst (max-element (rest a-seq))))))
(max-element [2 1 4 1])
(max 2 (rest [1]))
(max 2 (rest '(1)))
(defn max-element [a-seq]
  (let [fst (first a-seq)
        rst (rest a-seq)]
    (if (empty? rest)
      fst
      (max fst (max-element rst)))))
(max-element [2 4 1 4])
(rest [])
(defn max-element [a-seq]
  (let [fst (first a-seq)
        rst (rest a-seq)]
    (if (empty? rest)
      fst
      (max fst (max-element rst)))))
(max-element [])
(max-element [2 3 4])
(defn max-element [a-seq]
    (if (empty? (rest a-seq))
      fst
      (max fst (max-element (rest a-seq)))))
(defn max-element [a-seq]
    (if (empty? (rest a-seq))
      (first a-seq)
      (max (first a-seq) (max-element (rest a-seq)))))
(max-element [])
(max-element [2])
(max-element [2 4 1 4])
(defn seq-max [seq-1 seq-2]
  (if (> (count seq-1) (count seq-2))
    seq-1
    seq-2))
(seq-max [1 2] [1 2 3 4])
(seq-max [1 2] [3 4])
(defn longest-sequence [a-seq]
  (if (empty? (rest a-seq))
    (first a-seq)
    (seq-max (first a-seq) (longest-sequence (rest a-seq)))))
(longest-sequence [])
(longest-sequence [[1 2] [] [1 2 3])
(longest-sequence [[1 2] [] [1 2 3]])
  (and
   (not (nil? (first coll)))
    (empty? (rest coll))))
(defn singleton? [coll]
  (and
   (not (nil? (first coll)))
    (empty? (rest coll))))
(singleton? [1])
(singleton? #{2})
(singleton? [])
(singleton? [1 2 3])
(defn singleton? [coll]
  (and
   (if (empty? (rest coll))
   (first coll))))
(singleton? [1])
(and 1 2)
(defn singleton? [coll]
  (and
   (empty? (rest coll))
   (first coll)))
(singleton? 1)
(singleton? [1])
(defn singleton? [coll]
  (and
   (empty? (rest coll))
   (not (nil? (first coll)))))
(singleton? [1 2 3])
(singleton? [])
(singleton? [1])
(singleton? [nil])
(first [1 2 3])
(count (first [1 2 3]))
(defn my-map [f a-seq]
(if (empty? a-seq)
a-seq
(cons (f (first a-seq))
(my-map f (rest a-seq)))
)
(doc cons)
(map inc [1 2 3])
(defn my-filter [pred? a-seq]
  (if (empty? a-seq)
    a-seq
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-filter pred? (rest a-seq)))
      (my-filter pred? (rest a-seq)))))
(my-filter odd? [1 2 3 4])
(my-filter (fn [x] (> x 9000)) [12 49 90 9001])
(my-filter even? [1 3 5 7])
(defn only-numbers? [coll]
(cond
(empty? coll)
true
(number? (first coll))
(only-numbers (rest-coll))
:else false))
(defn only-numbers? [coll]
  (cond
   (empty? coll)
     true                        ; the empty sequence contains only numbers
   (number? (first coll))
     (only-numbers? (rest coll)) ; we got a number, let's check the rest
   :else
     false))                     ; it wasn't a number so we have our answer
(only-numbers? [1 2 3 4]
)
(only-numbers? [1 2 :D 3 4])
(defn sequence-contains? [elem a-seq]
  (or
   (= elem (first a-seq))
   (sequence-contains? elem (rest a-seq))))
(sequence-contains 3 [1 2 3])
(sequence-contains? 3 [1 2 3])
(sequence-contains 3 [4 7 9])
(sequence-contains? 3 [4 7 9])
(defn sequence-contains? [elem a-seq]
  (or
   (= elem (first a-seq))
   (and
    (not (empty? (rest a-seq)))
    (sequence-contains? elem (rest a-seq)))))
(sequence-contains? 3 [1 2 3])
(sequence-contains? 3 [1 2 4])
(sequence-contains? :pony [1 2 4])
(sequence-contains? :pony [])
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq)
    a-seq
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-whlie (rest a-seq)))
      '())))
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq)
    a-seq
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while (rest a-seq)))
      '())))
(my-take-while odd? [1 2 3 4[)
(my-take-while odd? [1 2 3 4])
(defn my-take-while [pred? a-seq]
  (if (empty? a-seq)
    a-seq
    (if (pred? (first a-seq))
      (cons (first a-seq) (my-take-while pred? (rest a-seq)))
      '())))
(my-take-while odd? [1 2 3 4])
(my-take-while odd? [1 3 4 5])
(my-take-while odd? [])
(my-take-while odd? [])(defn my-drop-while [pred? a-seq]
  (if (empty? a-seq)
    a-seq
    (if (not (pred? (first a-seq)))
      (rest a-seq)
      (my-drop-while pred? (rest a-seq)))))
(my-drop-while odd? [1 2 3 4])
(defn my-drop-while [pred? a-seq]
  (if (empty? a-seq)
    a-seq
    (if (not (pred? (first a-seq)))
      a-seq
      (my-drop-while pred? (rest a-seq)))))
(my-drop-while odd? [1 2 3 4])
(my-drop-while odd? [1 3 4 5])
(my-drop-while even? [1 3 4 5])
(my-drop-while odd? [])
(defn first-in [val seq-1 seq-2]
(cond
(and (empty? seq-1) (empty? seq-2) 0
(= (first seq-1) val) 1
(= (first seq-2) val) 2
:else (first-in val (rest seq-1) (rest seq-2)))
)
(defn first-in [val seq-1 seq-2]
  (cond
    (and (empty? seq-1) (empty? seq-2)) 0
    (= (first seq-1) val) 1
    (= (first seq-2) val) 2
    :else (first-in val (rest seq-1) (rest seq-2))))
(defn seq= [a-seq b-seq]
  (or
   (and (empty? seq-1) (empty? seq-2))
   (and
    (= (first seq-1) (first seq-2))
    (seq= (rest seq-1) (rest seq-2)))))
(defn seq= [a-seq b-seq]
  (or
   (and (empty? a-seq) (empty? b-seq))
   (and
    (= (first a-seq) (first b-seq))
    (seq= (rest a-seq) (rest b-seq)))))
(seq= [1 2 4] '(1 2 4))
(seq= [1 2 3] [1 2 3 4])
(seq= [1 2 3] [])
(seq= [1 2 nil] [1 2])
(seq= [nil] [])
(defn seq= [a-seq b-seq]
  (or
   (and (empty? a-seq) (empty? b-seq))
   (and
    (== (first a-seq) (first b-seq))
    (seq= (rest a-seq) (rest b-seq)))))
(seq= [nil] [])
(seq= [1 2 3] [1 2 3])
(seq= [1 2 3] [nil])
(defn seq= [a-seq b-seq]
  (or
   (and (empty? a-seq) (empty? b-seq))
   (and
    (= (count a-seq) (count b-seq))
    (= (first a-seq) (first b-seq))
    (seq= (rest a-seq) (rest b-seq)))))
(seq= [1 2 3] [nil])
(seq= [nil] [])
(doc cons)
(doc conj)
(defn my-map [f seq-1 seq-2]
  (or (empty? seq-1) (empty? seq-2)) '()
  (cons (f (first seq-1) (first seq-2))
        (f (rest seq-1) (rest seq-2))))
(my-map + [1 2 3] [4 4 4])
(defn my-map [f seq-1 seq-2]
  (or (empty? seq-1) (empty? seq-2)) '()
  (cons (f (first seq-1) (first seq-2))
        (my-map (f (rest seq-1) (rest seq-2)))))
(my-map + [1 2 3] [4 4 4])
(defn my-map [f seq-1 seq-2]
  (if (not (or (empty? seq-1) (empty? seq-2)))
    (cons (f (first seq-1) (first seq-2))
          (my-map (f (rest seq-1) (rest seq-2))))))
(my-map + [1 2 3] [4 4 4])
(defn my-map [f seq-1 seq-2]
  (if (not (or (empty? seq-1) (empty? seq-2)))
    (cons (f (first seq-1) (first seq-2))
          (my-map (f (rest seq-1) (rest seq-2)))))
  '())
(my-map + [1 2 3] [4 4 4])
(defn my-map [f seq-1 seq-2]
  (if (not (or (empty? seq-1) (empty? seq-2)))
    (cons (f (first seq-1) (first seq-2))
          (my-map (f (rest seq-1) (rest seq-2)))))
  0)
(my-map + [1 2 3] [4 4 4])
('())
([])
(#{})
(defn my-map [f seq-1 seq-2]
  (or (empty? seq-1) (empty? seq-2)) 0
  (cons (f (first seq-1) (first seq-2))
        (my-map (f (rest seq-1) (rest seq-2))))
)
(my-map + [1 2 3] [4 4 4])
(+ (first [1 2 3]) (first [4 5 6]))
(defn my-map [f seq-1 seq-2]
  (or (empty? seq-1) (empty? seq-2)) '()
  (cons (f (first seq-1) (first seq-2))
        (my-map f (rest seq-1) (rest seq-2)))
)
(my-map + [1 2 3] [4 4 4])
(defn my-map [f seq-1 seq-2]
  (if (not (or (empty? seq-1) (empty? seq-2)))
    (cons (f (first seq-1) (first seq-2))
          (my-map f (rest seq-1) (rest seq-2)))
    '()))
(my-map + [1 2 3] [4 4 4])
(my-map + [1 2 3] [4 4 4 4])
(my-map + [1 2 3] [])
